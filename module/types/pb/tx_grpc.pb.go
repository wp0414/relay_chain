// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: tx.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_Invoke_FullMethodName      = "/pb.Service/Invoke"
	Service_Commit_FullMethodName      = "/pb.Service/Commit"
	Service_Rollback_FullMethodName    = "/pb.Service/Rollback"
	Service_Prove_FullMethodName       = "/pb.Service/Prove"
	Service_GetResponse_FullMethodName = "/pb.Service/GetResponse"
	Service_DealRequest_FullMethodName = "/pb.Service/DealRequest"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Invoke receive request and invoke business contract on this chain with execute transaction, and return reply.
	Invoke(ctx context.Context, in *Request, opts ...grpc.CallOption) (*RPCReply, error)
	// Commit response on this chain, and return reply.
	Commit(ctx context.Context, in *Response, opts ...grpc.CallOption) (*RPCReply, error)
	// Rollback receive request and invoke business contract on this chain with rollback transaction, and return reply.
	Rollback(ctx context.Context, in *Request, opts ...grpc.CallOption) (*RPCReply, error)
	// Prove receive Prof(only include key,key means transaction id, result is nil), return Prof(result will be written, result is contract execute result).
	Prove(ctx context.Context, in *Prof, opts ...grpc.CallOption) (*Prof, error)
	// GetResponse receive Prof(only include key,key means crossId, result is nil), return Prof(result will be written, result is response json string).
	GetResponse(ctx context.Context, in *Prof, opts ...grpc.CallOption) (*Prof, error)
	DealRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Invoke(ctx context.Context, in *Request, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := c.cc.Invoke(ctx, Service_Invoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Commit(ctx context.Context, in *Response, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := c.cc.Invoke(ctx, Service_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Rollback(ctx context.Context, in *Request, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := c.cc.Invoke(ctx, Service_Rollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Prove(ctx context.Context, in *Prof, opts ...grpc.CallOption) (*Prof, error) {
	out := new(Prof)
	err := c.cc.Invoke(ctx, Service_Prove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetResponse(ctx context.Context, in *Prof, opts ...grpc.CallOption) (*Prof, error) {
	out := new(Prof)
	err := c.cc.Invoke(ctx, Service_GetResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DealRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Service_DealRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// Invoke receive request and invoke business contract on this chain with execute transaction, and return reply.
	Invoke(context.Context, *Request) (*RPCReply, error)
	// Commit response on this chain, and return reply.
	Commit(context.Context, *Response) (*RPCReply, error)
	// Rollback receive request and invoke business contract on this chain with rollback transaction, and return reply.
	Rollback(context.Context, *Request) (*RPCReply, error)
	// Prove receive Prof(only include key,key means transaction id, result is nil), return Prof(result will be written, result is contract execute result).
	Prove(context.Context, *Prof) (*Prof, error)
	// GetResponse receive Prof(only include key,key means crossId, result is nil), return Prof(result will be written, result is response json string).
	GetResponse(context.Context, *Prof) (*Prof, error)
	DealRequest(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Invoke(context.Context, *Request) (*RPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedServiceServer) Commit(context.Context, *Response) (*RPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedServiceServer) Rollback(context.Context, *Request) (*RPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedServiceServer) Prove(context.Context, *Prof) (*Prof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prove not implemented")
}
func (UnimplementedServiceServer) GetResponse(context.Context, *Prof) (*Prof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponse not implemented")
}
func (UnimplementedServiceServer) DealRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealRequest not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Invoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Invoke(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Commit(ctx, req.(*Response))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Rollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Rollback(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Prove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Prove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Prove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Prove(ctx, req.(*Prof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetResponse(ctx, req.(*Prof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DealRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DealRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DealRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DealRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _Service_Invoke_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Service_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Service_Rollback_Handler,
		},
		{
			MethodName: "Prove",
			Handler:    _Service_Prove_Handler,
		},
		{
			MethodName: "GetResponse",
			Handler:    _Service_GetResponse_Handler,
		},
		{
			MethodName: "DealRequest",
			Handler:    _Service_DealRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tx.proto",
}
